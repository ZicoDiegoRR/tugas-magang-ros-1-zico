// Generated by gencpp from file BankService/ops1Request.msg
// DO NOT EDIT!


#ifndef BANKSERVICE_MESSAGE_OPS1REQUEST_H
#define BANKSERVICE_MESSAGE_OPS1REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BankService
{
template <class ContainerAllocator>
struct ops1Request_
{
  typedef ops1Request_<ContainerAllocator> Type;

  ops1Request_()
    : selection(0)
    , money(0.0)
    , id(0)
    , name()
    , get_display(false)  {
    }
  ops1Request_(const ContainerAllocator& _alloc)
    : selection(0)
    , money(0.0)
    , id(0)
    , name(_alloc)
    , get_display(false)  {
  (void)_alloc;
    }



   typedef int8_t _selection_type;
  _selection_type selection;

   typedef float _money_type;
  _money_type money;

   typedef int16_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _get_display_type;
  _get_display_type get_display;





  typedef boost::shared_ptr< ::BankService::ops1Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BankService::ops1Request_<ContainerAllocator> const> ConstPtr;

}; // struct ops1Request_

typedef ::BankService::ops1Request_<std::allocator<void> > ops1Request;

typedef boost::shared_ptr< ::BankService::ops1Request > ops1RequestPtr;
typedef boost::shared_ptr< ::BankService::ops1Request const> ops1RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BankService::ops1Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BankService::ops1Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::BankService::ops1Request_<ContainerAllocator1> & lhs, const ::BankService::ops1Request_<ContainerAllocator2> & rhs)
{
  return lhs.selection == rhs.selection &&
    lhs.money == rhs.money &&
    lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.get_display == rhs.get_display;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::BankService::ops1Request_<ContainerAllocator1> & lhs, const ::BankService::ops1Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace BankService

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::BankService::ops1Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BankService::ops1Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BankService::ops1Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BankService::ops1Request_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BankService::ops1Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BankService::ops1Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BankService::ops1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de131049108731bc3c4ba83f05414a14";
  }

  static const char* value(const ::BankService::ops1Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde131049108731bcULL;
  static const uint64_t static_value2 = 0x3c4ba83f05414a14ULL;
};

template<class ContainerAllocator>
struct DataType< ::BankService::ops1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BankService/ops1Request";
  }

  static const char* value(const ::BankService::ops1Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BankService::ops1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 selection\n"
"float32 money\n"
"int16 id\n"
"string name\n"
"bool get_display\n"
;
  }

  static const char* value(const ::BankService::ops1Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BankService::ops1Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.selection);
      stream.next(m.money);
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.get_display);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ops1Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BankService::ops1Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BankService::ops1Request_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "selection: ";
    Printer<int8_t>::stream(s, indent + "  ", v.selection);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "money: ";
    Printer<float>::stream(s, indent + "  ", v.money);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "get_display: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get_display);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BANKSERVICE_MESSAGE_OPS1REQUEST_H
